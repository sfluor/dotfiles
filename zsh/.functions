# vim: set syntax=zsh:

# Docker compose up shortcut
dcu () {
    if [[ $# -eq 0 ]]
    then
        docker-compose up
    else
        docker-compose -f "$1" up
    fi
}

link_sshrc () {
    mkdir -p ~/.sshrc.d
    ln -sf ~/ssh/.vimrc ~/.sshrc.d/.vimrc
    ln -sf ~/zsh/.functions ~/.sshrc.d/.functions
    ln -sf ~/zsh/.zshenv ~/.sshrc.d/.zshenv
    ln -sf ~/zsh/.zshrc ~/.sshrc.d/.zshrc
    ln -sf ~/zsh/.aliases ~/.sshrc.d/.aliases
    ln -sf ~/.datadogrc ~/.sshrc.d/.datadogrc
}


# Fuzzy search on github branches
fbr() {
    local branches branch
    branches=$(git branch -vv) &&
    branch=$(echo "$branches" | fzf +m) &&
    echo "$branch" | awk '{print $1}' | sed "s/.* //"
}

# Fuzzy search on github branches
fcb() {
    git checkout $(fbr)
}

# scratch creates a new scratch branch
scratch() {
    git checkout -b sami/scratch
}

kubecontext() {
    kubectl config current-context
}

# kubenamespace takes the current context and returns the current namespace
kubenamespace() {
    kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${1}\")].context.namespace}"
}

# func to use the local vagrantfile instead of the global one
lagrant() {
    VAGRANT_CWD=$(pwd) vagrant $@
}

mkd() {
	mkdir -p "$@" && cd "$_";
}

print_colors() {
    for i in {0..255} ; do
        printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
        if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
            printf "\n";
        fi
    done
}

note() {
    directory=${NOTES_DIR:-~/vrac/notes/}
    today_file="$(date +%F).md"

    full_path="$directory/$today_file"

    # create directory if it does not exist
    mkdir -p $directory

    # get latest file
    latest_file="$directory/$(ls -1 $directory | tail -n1)"

    if test -f "$full_path" ; then
        echo "Recovering existing file at: $full_path"
        # If today's file does not exist yet
    else
        echo "Creating new file at: $full_path"
        # mark old files as read-only
        find $directory -name "*.md" -exec chmod 440 {} \;

        # copy the content of the latest file
        echo "# Latest note: \n" >> $full_path
        cat $latest_file >> $full_path
        echo "\n# Today" >> $full_path
    fi

    # open the note
    $EDITOR $full_path
}

scratch() {
    filename="$1"
    if [[ -z "$filename" ]]; then
        filename="scratch_$(date +%s)"
    fi

    mkdir -p ~/vrac/scratches/
    $EDITOR "~/vrac/scratches/$filename.txt"
}
