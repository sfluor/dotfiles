#!/usr/bin/env python

import json
import argparse
import os
import sys
from pathlib import Path

def dotfiles_path():
    return Path(sys.argv[0]).resolve().parent.parent

FMT = "{{{{ {} }}}}"
def apply_theme(theme, content, prefix=''):

    for key, value in theme.items():
        new_prefix = key if not prefix else f'{prefix}.{key}'
        if isinstance(value, dict):
            content = apply_theme(value, content, prefix=new_prefix)
        else:
            content = content.replace(FMT.format(new_prefix), value)

    return content


def main(theme):
    p = Path(dotfiles_path())
    templates = list(p.glob("**/*.tmpl"))

    print(f"Using the following directory as the root: {p}\n---")
    print("Found the following templates: \n", ', '.join([str(t) for t in templates]))

    for template in templates:
        with template.open() as file:
            content = file.read()

        content = apply_theme(theme, content)

        # Remove .tmpl
        generated_path = str(template)[:-5]

        with open(generated_path, "w") as file:
            file.write(content)

        print(f"\t - generated {generated_path} from {str(template)}")

    print("---\nYou should add the generated files to the .gitignore")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Apply a given theme to the dotfiles')
    parser.add_argument('theme', type=str, help='path to the theme')
    args = parser.parse_args()

    with Path(args.theme).open() as f:
        theme = json.load(f)

    main(theme)
